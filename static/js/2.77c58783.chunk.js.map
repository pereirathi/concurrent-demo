{"version":3,"sources":["utils/images.js","components/atoms/card/card.js"],"names":["NOT_FOUND_IMAGE","AUTO","FIT","isStaticImage","url","match","process","IMAGES_CDN_URL","isPngFile","test","getOptimizedUrl","mask","width","height","cornerRadius","ar","fit","dpr","auto","optimizedUrl","e","console","warn","ProductCard","items","map","product","className","src","images","alt","displayName","id"],"mappings":"uJAAA,IAEaA,EAAkB,oCAElBC,EACM,kBAGNC,EACN,MAaDC,EAAgB,SAACC,GAAD,OAASA,EAAIC,MAAM,iBAAmBC,mJAAYC,gBAExE,SAASC,EAAUJ,GAEjB,MADuB,QACDK,KAAKL,GAG7B,IA2BeM,EA3BS,SACtBN,GAKI,IAAD,yDAFC,GADFO,EAGC,EAHDA,KAAMC,EAGL,EAHKA,MAAOC,EAGZ,EAHYA,OAAQC,EAGpB,EAHoBA,aAGpB,IAHkCC,UAGlC,MAHuC,EAGvC,MAH0CC,WAG1C,MAHgDd,EAGhD,MAHyDe,WAGzD,MAnCc,EAmCd,MAH2EC,YAG3E,MAHkFjB,EAGlF,EACH,IACE,IAAKG,EAAK,OAAOJ,EAEjB,IAAImB,EAAY,UAAMf,EAAN,iBAAkBc,EAAlB,gBAA8BF,EAA9B,cAAuCJ,EAAvC,cAAkDC,GAAlD,OAA2DE,EAAE,cAAUA,GAAO,GAA9E,gBAAwFE,GAQxG,OANIN,IAAMQ,GAAY,gBAAaR,EAAb,0BAAmCG,IAErDN,EAAUJ,KAAMe,GAAgB,WAEhChB,EAAcC,KAAMe,EAAeb,mJAAYC,eAAiBY,GAE7DA,EACP,MAAOC,GAIP,GAFAC,QAAQC,KAAKF,IAERhB,EAAK,OAAOJ,I,gBC7BNuB,UApBK,SAAC,GAAD,SAAGC,MACjB,GAAGC,KAAI,SAAAC,GAAO,OAClB,8BACA,sBAAKC,UAAU,eAAf,UACA,qBAAKA,UAAU,aAAf,SACE,qBACIC,IAAKlB,EAAgBgB,EAAQG,OAAO,GAAI,CACxChB,OAAQ,IACRD,MAAO,MAEPkB,IAAI,WAGT,qBAAKH,UAAU,YAAf,SACA,6BAAKD,EAAQK,oBAZJL,EAAQM","file":"static/js/2.77c58783.chunk.js","sourcesContent":["const pixelRatio = 2\n\nexport const NOT_FOUND_IMAGE = '/static/img/product-not-found.png'\n\nexport const AUTO = {\n  COMPRESS_FORMAT: 'compress,format',\n}\n\nexport const FIT = {\n  MAX: 'max',\n  CROP: 'crop',\n  CLIP: 'clip',\n}\n\nexport const FORMAT = {\n  JPEG: 'jp2',\n}\n\nexport const MASK = {\n  CORNERS: 'corners',\n}\n\nconst isStaticImage = (url) => url.match('/static/img/') && process.env.IMAGES_CDN_URL\n\nfunction isPngFile(url) {\n  const extensionRegex = /\\.png/\n  return extensionRegex.test(url)\n}\n\nconst getOptimizedUrl = (\n  url,\n  {\n    mask, width, height, cornerRadius, ar = 0, fit = FIT.MAX, dpr = pixelRatio, auto = AUTO.COMPRESS_FORMAT,\n  } = {},\n// eslint-disable-next-line consistent-return\n) => {\n  try {\n    if (!url) return NOT_FOUND_IMAGE\n\n    let optimizedUrl = `${url}?auto=${auto}&fit=${fit}&w=${width}&h=${height}${ar ? `&ar=${ar}` : ''}&dpr=${dpr}`\n\n    if (mask) optimizedUrl += `&mask=${mask}&corner-radius=${cornerRadius}`\n\n    if (isPngFile(url)) optimizedUrl += '&fm=png'\n\n    if (isStaticImage(url)) optimizedUrl = process.env.IMAGES_CDN_URL + optimizedUrl\n\n    return optimizedUrl\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.warn(e)\n\n    if (!url) return NOT_FOUND_IMAGE\n  }\n}\n\nexport default getOptimizedUrl\n","import getOptimizedUrl from '../../../utils/images'\nimport './card.css'\n\nconst ProductCard = ({ items }) => \nitems[0].map(product => (\n  <div key={product.id}>\n  <div className=\"card-product\">\n\t\t<div className=\"card-image\">\n\t\t  <img\n        src={getOptimizedUrl(product.images[0], {\n        height: 180,\n        width: 230,\n        })}\n        alt=\"none\"\n      />\n\t\t</div>\n\t  <div className=\"card-info\">       \n\t\t\t<h3>{product.displayName}</h3>\n\t\t</div>\n  </div>\n  </div>\n))\n\nexport default ProductCard\n"],"sourceRoot":""}